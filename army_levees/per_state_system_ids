import requests, json, random
import numpy as np
import pandas as pd
import rasterio
import os
import geopandas as gpd
import matplotlib.pyplot as plt
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from shapely.geometry import LineString, MultiLineString
from utils import json_to_geodataframe, plot_profiles
from tqdm import tqdm
from shapely.geometry import Polygon
import eemont
import py3dep
from requests.exceptions import RetryError
import time
import ee
import geemap
# Initialize the Earth Engine library.
ee.Authenticate()
ee.Initialize()

CRS = "EPSG:4269"
get_url = 'https://levees.sec.usace.army.mil:443/api-local/system-categories/usace-non-usace'

# Define a circuit breaker function
def circuit_breaker(max_failures, reset_time):
    def decorator(func):
        failures = 0
        def wrapper(*args, **kwargs):
            nonlocal failures
            try:
                response = func(*args, **kwargs)
                failures = 0  # Reset on success
                return response
            except RetryError as e:
                failures += 1
                if failures >= max_failures:
                    print(f"Max failures reached: {failures}. Entering cooldown period.")
                    time.sleep(reset_time)
                    failures = 0  # Reset after cooldown
                raise e
        return wrapper
    return decorator

def requests_retry_session(retries=5, backoff_factor=1, status_forcelist=(500, 502, 504), session=None):
    session = session or requests.Session()
    retry = Retry(
        total=retries,
        read=retries,
        connect=retries,
        backoff_factor=backoff_factor,
        status_forcelist=status_forcelist,
    )
    adapter = HTTPAdapter(max_retries=retry)
    session.mount('http://', adapter)
    session.mount('https://', adapter)
    return session

def download_system_ids(url, filepath='system_ids.json'):
    # Check if the file already exists
    if not os.path.exists(filepath):
        try:
            # Make a request to download the data
            response = requests.get(url)
            print(response)
            response.raise_for_status()  # Raise an error for bad responses
            # Extract both USACE and NON-USACE data
            data = response.json()
            usace_data = json.loads(response.json()['USACE'])
            non_usace_data = json.loads(response.json()['Non-USACE'])
            # Combine both lists
            combined_data = {'USACE': usace_data, 'Non-USACE': non_usace_data}
            # Save the combined data to a file
            with open(filepath, 'w') as file:
                json.dump(combined_data, file)
            print(f"Downloaded system IDs to {filepath}.")
        except requests.RequestException as e:
            print(f"Request failed: {e}")
            return None
    else:
        print(f"Using existing file for system IDs: {filepath}.")

def load_system_ids(filepath='system_ids.json'):
    # Load the system IDs from the file
    try:
        with open(filepath, 'r') as file:
            data = json.load(file)
            # Initialize an empty list to hold all system IDs
            all_system_ids = []
            # Check and parse USACE IDs if available
            if 'USACE' in data:
                if isinstance(data['USACE'], str):
                    # If the USACE data is a string, convert it to a list
                    usace_ids = json.loads(data['USACE'])
                else:
                    # If it's already a list, use it directly
                    usace_ids = data['USACE']
                all_system_ids.extend(usace_ids)
            # Check and append NON-USACE IDs if available
            if 'Non-USACE' in data and isinstance(data['Non-USACE'], list):
                all_system_ids.extend(data['Non-USACE'])
            # Return the combined list of IDs
            if all_system_ids:
                return all_system_ids
            else:
                print("Error: No valid system IDs found.")
                return None
    except FileNotFoundError:
        print(f"File not found: {filepath}")
        return None
    except json.JSONDecodeError:
        print(f"Error decoding JSON from {filepath}")
        return None
    
def get_state_info(system_id):
    try:
        url = f'https://levees.sec.usace.army.mil:443/api-local/system/{system_id}/detail'
        response = requests_retry_session().get(url).json()
        states = response['states']
        print(states)
        return states
    except Exception as e:
        print(f"Failed to get state info for system ID: {system_id}: {e}")
    return None
    
if __name__ == '__main__':
    # Download system IDs
    download_system_ids(get_url)
    # Load system IDs
    system_ids = load_system_ids()
    indiana_system_ids = []
    for system_id in system_ids:
        print(system_id)
        states = get_state_info(system_id)
        if 'Indiana' in states:
            indiana_system_ids.append(system_id)
        else:
            pass
    with open('indiana_system_ids.json', 'w') as file:
        json.dump(indiana_system_ids, file)
    